# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
install.packages("rmarkdown")
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
source('~/.active-rstudio-document')
not_cancelled
source('~/.active-rstudio-document')
not_cancelled
library(tidyverse)
library(tidyverse)
ggplot(data = diamonds) +
geom_bar(mapping=aes(x=cut))
diamonds %>%
count(clarity)
ggplot(data = diamonds) +
geom_histogram(mapping=aes(x=carat), binwidth=0.5)
diamonds %>%
count(cut_width(carat, 0.5))
cut_width(diamonds$carat, 0.5)
?cut_width
cut_width(c(1, 2, 3),1)
table(cut_width(c(1, 2, 3),1))
cut_width(c(1, 2, 3),1)
cut_width(c(1, 2, 3),1) + 1
diamonds %>%
count(cut_width(carat, 0.5))
cut_width(c(1, 2, 3),1)
cut_width(c(1, 2, 3,1, 2, 1, 1, 3, 4, 6),1)
cut_width(c(1, 2, 3,1, 2, 1, 1, 3, 4, 6),1) [1]
smaller <- diamonds %>%
filter(carat < 3)
smaller
ggplot(data=smaller, mapping=aes(x=carat)) + geom_histogram(binwidth=0.1)
ggplot(data=smaller, mapping=aes(x=carat)) + geom_freqpoly(binwidth=0.1)
ggplot(data=diamonds, mapping=aes(x=carat)) + geom_freqpoly(binwidth=0.1)
ggplot(data=diamonds, mapping=aes(x=carat, color=cut)) + geom_freqpoly(binwidth=0.1)
ggplot(data=diamonds, mapping=aes(x=carat)) + geom_histogram(binwidth=0.1)
ggplot(data=smaller, mapping=aes(x=carat)) + geom_histogram(binwidth=0.1)
ggplot(data=smaller, mapping=aes(x=carat)) + geom_histogram(binwidth=0.01)
summary(faithful)
faithful
head(faithful)
ggplot(data=faithful, mapping=aes(x=eruptions)) + geom_histogram(binwidth=0.25)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(pryr)
x <- "This is a reasonably long string."
pryr::object_size(x)
install.packages(pryr)
install.packages("pryr")
letters
paste0("a", "b")
x <- "This is a reasonably long string."
pryr::object_size(x)
sample(10)
sample(10) + 100
?sample
tibble(x=1:3, y=1:2)
library(tidyverse)
tibble(x=1:3, y=1:2)
y <- rep(1:2, each=2)
y
y <- rep(1:4, each=2)
y
sample(y)
y <- sample(letters)
y}
y
y <- sample(letters, rep=2)
y
y <- rep(sample(letters),2)
y
set_names(1:3, c("a", "b", "c"))
x <- sample(20, 100, replace=TRUE)
x
y <- x > 10
y
x[y]
sum(y)
typeof(c(TRUE, 1L))
c(TRUE, 1)[[1]]
x
x <- c(1, 2, 3)
x[4]
x[3]
x[which(x>2)]
x[-which(x>=2)]
x[-which(x<=2)]
which(x>2)
which(x>=2)
-which(x>=2)
-c(TRUE, FALSE)
dplyr::near
x <- c(1:10, NA, NaN, Inf, -Inf)
x
mean(is.na(x))
is.na(x)
?is.na
2/14
?is.vector
v <- c(1, 2, 3)
is.vector(v)
v <- c(a=1, b=2, c=3)
is.vector(v)
set_names(v, c("c", "d", "e"))
is.vector(v)
attr(v, "algo", "nada")
v
str(v)
is.vector(v)
attr(v, "algo") <- "nada"
str(v)
is.vector(v)
?is.vector
is.vector()
is.vector
setNames
purrr::set_names
set_names(1, c(2, 3))
set_names(1, c(2))
is_vector(2)
is_vector("algo")
last_val <- function(x) {
x[length(x)]
}
last_val(c(1, 2, 3))
last_val(c(1, 2, 3,4))
last_val(1
)
last_val <- function(x) {
x[[length(x)]]
}
last_val(1)
last_val(c(1, 2, 3,4))
seq_along(c(1, 2, 3))
seq_along(c(2, 3, 4))
seq_along
?seq_along
seq_along(2)
}
even_ind <- function(x) {
x[seq_along(x) %% 2 == 0]
}
even_ind(1:10)
a <- list(a=1:3, b="a string", c=pi, d=list(-1,-5))
A
a
a[1:2]
str(a[1:2])
a[[1]]
a[1]
a
a[1]
a[1:2]
a[[4]]
a
a[[4]]
a[["d"]]
a[["d"]][1]
a[["d"]][[1]]
is.vector(a)
who <- read.csv("WHO.csv")
who_euro <- subset(who, Region=="Europe")
who_euro
install.package("gganimate")
install.packages("gganimate")
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
install.packages(gganimate)
install.packages(
"gganimate")
devtools::install_github("dgrtwo/gganimate")
install.packages(
"devtools")
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
library(gapminder)
install.packages(gapminder)
install.packages("gapminder")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
library(gapminder)
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
)
