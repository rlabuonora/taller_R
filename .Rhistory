model1 <- function(a, data) {
a[1] + a[2] * data$x
}
sim1$x
model1(c(1, 2), sim1)
model1(mod, data)
mod <- c(1, 2)
model1(mod, data)
model1(c(1, 2), sim1)
measure_distance <- function(mod, data) {
# mod is c(1, 2)
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
models
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models %>% mutate(dist = purrr:map2_dbl(a1, a2, sim1_dist))
library(purrr)
models %>% mutate(dist = purrr:map2_dbl(a1, a2, sim1_dist))
models %>% mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models <- models %>% mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
models$dist
rank(models$dist)
rank(models$dist) < 10
models <- filter(rank(dist) < 10)
models <- models %>%filter(rank(dist) < 10)
models <- models %>% mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
ggplot(sim1, aes(x, y)) + geom_point()
models
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2),
data=models
)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
models <- models %>% mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2),
data=filter(models, rank(dist) < 10)
)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2),
data=filter(models, rank(dist) < 10),
color = -dist
)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2, color = -dist),
data=filter(models, rank(dist) < 10),
)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2, color = -dist),
data=filter(models, rank(dist) < 10),
)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(
aes(intercept=a1, slope=a2, color = -dist),
data=filter(models, rank(dist) < 10)
)
ggplot(models, aes(a1, a2))
ggplot(models, aes(a1, a2)) + geom_plot()
ggplot(models, aes(a1, a2)) + geom_point()
ggplot(models, aes(a1, a2, dist)) + geom_point()
ggplot(models, aes(a1, a2)) + geom_point(aes(color=-dist)
ggplot(models, aes(a1, a2)) + geom_point(aes(color=-dist))
ggplot(models, aes(a1, a2)) + geom_point(aes(color=-dist))
ggplot(models, aes(a1, a2)) +
+ geom_point(
data = filter(models, rank(dist) < 10),
colour = "red", size=4
)
geom_point(aes(color=-dist))
ggplot(models, aes(a1, a2)) +
+ geom_point(
data = filter(models, rank(dist) < 10),
colour = "red", size=4
) +
geom_point(aes(color=-dist))
ggplot(models, aes(a1, a2)) +
+ geom_point(
data = filter(models, rank(dist) < 10),
colour = "red", size=4
) +
geom_point(aes(color=-dist))
ggplot(models, aes(a1, a2)) +
geom_point(
data = filter(models, rank(dist) < 10),
colour = "red", size=4
) +
geom_point(aes(color=-dist))
grilla <- expand.grid(
a1 = seq(-5, 20, length=25)
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grilla <- expand.grid(
a1 = seq(-5, 20, length=25)
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grilla <- expand.grid(
a1 = seq(-5, 20, length=25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grilla
grilla %>% ggplot(aes(a1, a2)) + geom_point()
grilla %>% ggplot(aes(a1, a2)) + geom_point(aes(color = -dist))
grilla %>% ggplot(aes(a1, a2)) +
geom_point(data=filter(models, rank(dist) < 10), aes(color="red")) +
geom_point(aes(color = -dist))
grilla %>% ggplot(aes(a1, a2)) +
geom_point(data=filter(models, rank(dist) < 10), aes(colour="red")) +
geom_point(aes(color = -dist))
grilla %>% ggplot(aes(a1, a2)) +
geom_point(data=filter(models, rank(dist) < 10),
size = 4, colour="red") +
geom_point(aes(color = -dist))
grilla %>% ggplot(aes(a1, a2)) +
geom_point(data=filter(grid, rank(dist) < 10),
size = 4, colour="red") +
geom_point(aes(color = -dist))
grilla %>% ggplot(aes(a1, a2)) +
geom_point(data=filter(grilla, rank(dist) < 10),
size = 4, colour="red") +
geom_point(aes(color = -dist))
?optim
best <- optim(c(0, 0), measure_distance, data=sim1)
best
ggplot(sim1, aes(x, y)) + geom_point()
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(intercept = best[1], slope = best[2])
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(intercept = best$par[1], slope = best$par[2])
grid <- sim1 %>% data_grid(x)
grid
sim1_mod
sim1_mod <- lm(y ~ x, data =sim1)
sim1_mod
grid <- grid %>%
add_predictions(sim1_mod)
add_predictions
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) + geom_point(aes(y=y))
geom_point(aes(y=y))
ggplot(sim1, aes(x)) +
geom_line(aes(y=pred)) +
geom_point(aes(y=y))
ggplot(sim1, aes(x)) +
geom_line(aes(y=pred), data=grid) +
geom_point(aes(y=y))
sim1 <- sim1 %>% add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(x, resid)) + geom_point()
ggplot(sim1, aes(x, resid)) + geom_point() +
geom_ref_line(h = 0)
sim2
ggplot(sim2) +
geom_point(aes(x, y))
sim2
mod2 <- lm(y~x, data = sim2)
data_grid(sim2, x)
grid <- sim2 %>%
data_grid(x) %>%
add_predictions(mod2)
grid
x <- 1
x
class(x) # la función class evalúa su argumento antes de
x <- 1
class(quote(x))
x
num <- 1
f <- function() {
num
}
f()
num <- 1
f <- function() {
num <- 2
num
}
f()
xyz
foo <- function() {
xyz +1
}
foo() # Error
df <- data_frame(x=c(1, 2, 3), y = c(3, 2, 1))
df
mutate(df, z=x+y)
x
x
df <- data_frame(x=c(1, 2, 3), y = c(3, 2, 1))
df$x
x
df
subset(df, c(TRUE, FALSE, TRUE))
mtcars$cyl == 6
subset(mtcars, mtcars$cyl == 6)
df
subset(df, c(TRUE, FALSE, TRUE))
mtcars$cyl == 6
mtcars$cyl
mtcars$cyl == 6
subset(mtcars, cyl==6)
subset(mtcars, cyl==6)
filter(mtcars,xyz ==6)
lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp + mtcars$wt)
lm(mpg~cyl+disp+wt, data=mtcars)
reemplazar <- function(x, val) {
x[is.na(x)] <- val
x
}
reemplazar(c(1,2, 3, NA), -1)
reemplazar(c(1,2, 3, NA))
reemplazar <- function(x, val=0) {
x[is.na(x)] <- val
x
}
reemplazar(c(1,2, 3, NA))
abrir <- function(df, col=names(df)) {
df2<-read_rds(df)
select(df2, col)
}
abrir("data_frame.RDS")
setwd("~/taller_R/Taller3-Rlang/slides")
abrir("data_frame.RDS")
df2<-read_rds(df)
df2<-read_rds("data_frame.RDS")
colnames(df2)
names(df2)
remove(df2)
abrir <- function(df, col=0) {
df2<-read_rds(df)
if_else(col==0, col=names(df2), col)
select(df2, col)
}
abrir("data_frame.RDS")
abrir <- function(df, col=NULL) {
df2<-read_rds(df)
if_else(col==NULL, col=names(df2), col)
select(df2, col)
}
abrir("data_frame.RDS")
abrir <- function(df, col=NULL) {
df2<-read_rds(df)
if (is.null(col)) col=names(df2) else col
select(df2, col)
}
abrir("data_frame.RDS")
df2
abrir("data_frame.RDS", "a")
data <- abrir("data_frame.RDS", "a")
data <- abrir("data_frame.RDS", c("a","b"))
View(data)
df2<-read_rds("data_frame.RDS")
names(df2)
select(df2, names(df2))
select(df2, c("a", "b", "c"))
grep("Pole", c("Equator","North Pole","South Pole"))
grep("pole", c("Equator","North Pole","South Pole"))
nchar(c("Equator","North Pole","South Pole"))
paste("North", "Pole")
paste("North", "Pole", sep="")
paste("North", "and", "South",  "Pole", sep="-")
paste(c("a", "b", "c"), c("d", "e"), sep="-")
paste(c("a", "b", "c"), c("d", "e"), sep="-", collapse="*")
i <- 1
i <- 1
sprintf("El cuadrado de %d es %d", i, i^2)
i <- 1:10
sprintf("El cuadrado de %d es %d", i, i^2)
sprintf("El cuadrado de %d es %d %d", i, i^2)
substring("Equator", 3, 5)
strsplit("6-16-2011", split="-")
strsplit(c("6-16-2011". "6-16-2011", split="-")
```
strsplit(c("6-16-2011", "6-16-2011", split="-")
```
strsplit(c("6-16-2011", "6-16-2011", split="-"))
strsplit(c("6-16-2011", "6-16-2011"), split="-")
regexpr("uat", "Equator")
regexpr("uat", c("Equator", "What", "Suat Equat"))
gregexpr("iss", c("Mississippi", "Kiss", "Algo"))
library(stringr)
x <- c("apple", "banana", "pear")
str_match(x, ".a.")
str_match_all(x, ".a.")
grep(".", c("abc", "de", "f.g"))
grep("\\.", c("abc", "de", "f.g"))
x
str_match(x, "^a") # encontrar una a al principio
x
str_match(x, "^a") # encontrar una a al principio
str_match(x, "a$") # al final
str_match(y, "apple")
y <- c("apple pie", "apple", "apple cake")
str_match(y, "apple")
str_match(y, "^apple$")
str_match(x, "\\d\\d\\d\\d")
x <- c("vab_2015", "algo", "nada", "pib_2015")
str_match(x, "\\d\\d\\d\\d")
x <- c("vab_2015", "algo", "nada", "pib_2015")
str_match(x, "\\d\\d\\d\\d$")
x <- c("grey", "gray")
str_match(x, "gr(a|e)y")
x <- c("colour", "color")
str_match(x, "colou?r")
x <- c("colour", "color")
str_match(x, "col(ou)?r")
x <- c("colour", "colr")
str_match(x, "col(ou)?r")
x <- c("colour", "color", "colouur", "colouuuur")
str_match(x, "colou+r")
x <- c("colour", "color", "colouur", "colouuuur")
str_match(x, "colou*r")
str_match(x, "colo(u+)r") # uau: captura
x <- c("colour", "color", "colouur", "colouuuuuuuuuuuuuur")
str_match(x, "colo(u+)r") # uau: captura
x <- c("banana", "coconut", "cucumber", "jujube", "papaya", "salal berry")
str_match(x, "(..)\\1")
x <- c("banana", "coconut", "cucumber", "jujube", "papaya", "salal berry")
str_match(x, "(..)\\1")
x <- c("bananan", "coconut", "cucumber", "jujube", "papaya", "salal berry")
str_match(x, "(..)\\1")
ggplot(sim2) +
geom_point(aes(x, y))
mod2 <- lm(y~x, data = sim2)
grid <- sim2 %>%
data_grid(x) %>%
add_predictions(mod2)
grid
sim2
grid
grid <- sim2 %>%
data_grid(x) %>%
add_predictions(mod2)
grid
mod2 <- lm(y~x, data = sim2)
grid <- sim2 %>%
data_grid(x) %>%
add_predictions(mod2)
grid
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred))
sim2
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred), data=grid)
sim2
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred), data=grid) +
geom_point(aes(y))
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred), data=grid) +
geom_point(aes(y=y, color="red"))
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred),
color="red", size=4, data=grid) +
geom_point(aes(y=y))
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred),
color="red", size=2, data=grid) +
geom_point(aes(y=y))
ggplot(sim2, aes(x)) +
geom_point(aes(y=pred),
color="red", size=2, data=grid) +
geom_point(aes(y=y), alpha=1/4)
ggplot(sim2, aes(x)) +
geom_point(aes(y=y), alpha=1/4) +
geom_point(aes(y=pred),
color="red", size=4, data=grid) +
ggplot(sim2, aes(x)) +
geom_point(aes(y=y), alpha=1/4) +
geom_point(aes(y=pred),
color="red", size=4, data=grid)
ggplot(sim2, aes(x)) +
geom_point(aes(y=y), alpha=1/4) +
geom_point(aes(y=pred),
color="red", size=4, data=grid)
ggplot(sim2, aes(x)) +
geom_point(aes(y=y)) +
geom_point(aes(y=pred),
color="red", size=4, data=grid)
ggplot(sim2, aes(x)) +
geom_point(aes(y=y)) +
geom_point(aes(y=pred),
color="red", size=3, data=grid)
mod2
ggplot(sim3, aes(x1, y, color=x2)) + geom_point()
mod1 <- lm(y ~ x1 + x2, data = sim3)
mod2 <- lm(y ~ x1 * x2, data = sim3)
model_matrix(sim3, y ~x1 * x2)
grid <- sim3 %>% data_grid(x1, x2)
grid
grid <- sim3 %>% data_grid(x1, x2) %>% add_predictions(mod1)
grid
grid <- sim3 %>% data_grid(x1, x2) %>% gather_predictions(mod1, mod2)
grid
ggplot(sim3, aes(x1, y, color=x2)) + geom_point() + facet_wrap(~ model)
grid
ggplot(grid, aes(x1, y, color=x2)) + geom_point() + facet_wrap(~ model)
ggplot(sim3, aes(x1, y, color=x2)) +
geom_point() +
geom_line(data = grid) +
facet_wrap(~ model)
ggplot(sim3, aes(x1, y, color=x2)) +
geom_point() +
geom_line(data = grid, aes(y=pred)) +
facet_wrap(~ model)
ggplot(sim3, aes(x1, y, color=x2)) +
geom_point() +
facet_wrap(~ model)
ggplot(sim3, aes(x1, y, color=x2)) +
geom_point() +
geom_line(data = grid, aes(y=pred)) +
facet_wrap(~ model)
moid1
mod1
mod2
sim3 %>% gather_residuals(mod1)
sim3 %>% gather_residuals(mod1, mod2)
sim3 <- sim3 %>% gather_residuals(mod1, mod2)
ggplot(sim3, aes(x1, resid, color = x2)) +
geom_point() +
facet_grid(model ~ x2)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(y=price)) + geom_boxplot()
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(dimaonds, aes(carat, price)) + geom_hex()
ggplot(diamonds, aes(carat, price)) + geom_hex()
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
ggplot(diamonds2, aes(lprice, lcarat)) + geom_hex()
ggplot(diamonds2, aes(lprice, lcarat)) + geom_hex(bins=50)
mod_diamond <- lm(lprice ~ lcarat, data=diamonds)
mod_diamond <- lm(lprice ~ lcarat, data=diamonds2)
?seq2_range
?seq_range
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
ggplot(dimaonds2, aes(carat, price)) +
geom_hex(bins=50) +
geom_line(data = grid, color = "red", size = 1)
ggplot(diamonds2, aes(carat, price)) +
geom_hex(bins=50) +
geom_line(data = grid, color = "red", size = 1)
grid
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20, pretty=TRUE)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
grid
ggplot(diamonds2, aes(carat, price)) +
geom_hex(bins=50) +
geom_line(aes(lprice, lcarat), data = grid, color = "red", size = 1)
ggplot(diamonds2, aes(carat, price)) +
geom_hex(bins=50) +
geom_line(data = grid, color = "red", size = 1)
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamond, "lresid")
diamonds2
ggplot(diamonds2, aes(carat, lresid)) + geom_hex(bins=50)
ggplot(diamonds2, aes(cut, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(color, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, lresid)) + geom_boxplot()
mod_diamond <- lm(
lprice ~ lcarat + color + cut + clarity,
data = diamonds2
)
mod_diamond
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamond) %>%
add_predictions(mod_diamond2)
mod_diamond2 <- lm(
lprice ~ lcarat + color + cut + clarity,
data = diamonds2
)
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamond) %>%
add_predictions(mod_diamond2)
grid
diamonds2
grid
ggplot(grid, aes(cut, pred)) + geom_point()
?add_predictions
